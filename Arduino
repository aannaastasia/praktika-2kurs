#include <LiquidCrystal.h>
#include <SPI.h>
#include <SD.h>

File output;

// Инициализируем библиотеку номерами выводов интерфейса
LiquidCrystal lcd(A4, A5, 5, 8, 3, 2);

// To Set Debug Print On (1) / Off (0)
#define DEBUG 1

// Общее количество этажей
#define TOTAL_FLOORS 3
// Иницализация кнопок
const int FloorRequestUpPin[TOTAL_FLOORS - 1] = {6, 9};
const int FloorRequestDownPin[TOTAL_FLOORS - 1] = {7, 10};

const int LiftRequestPin[TOTAL_FLOORS] = {A0, A1, A2};

bool request_array[TOTAL_FLOORS]; // массив, чтобы понять на какой этаж вызывают (true - индекс этажа)
int request_count = 0; // количество запросов
int buffer_request_count_up = 0; // количество запросов наверх
int buffer_request_count_down = 0; // количество запросов вниз

bool buffer_request_up[TOTAL_FLOORS];
bool buffer_request_down[TOTAL_FLOORS];

// Текущий этаж
int current_floor_ = 0;
// Последний этаж
int prev_floor_ = 0;

// Сохраняет время, когда лифт был на последнем этаже.
// Так как от лифта нет обратной связи по положению, таймер
// используется для проверки того, достиг ли лифт своей точки
// назначения.
unsigned long time_last_floor_;

// Предполагаемое время, необходимое лифту для перемещения на 1 этаж (вверх или вниз).
const int delay_floor_to_floor = 1000;
const int delay_wait_on_floor = 2000;
const int delay_emergency_open = 1000;

// Сохраняет состояние направления лифта.
#define STOP 0
#define UP 1
#define DOWN 2
int dir_state = STOP;

// состояние двери лифта.
#define GATE_OPEN 0
#define GATE_CLOSE 1
int door_state = GATE_CLOSE;


void setup()
{
  Serial.begin(9600);
  
  // настроить количество столбцов и строк дисплея:
  lcd.begin(16, 2);
  // Напечатайте сообщение на дисплее
  lcd.print("Initiating Program");
  delay(50);

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");
  
  // Инициализация массива запросов
  for (int i = 0; i < TOTAL_FLOORS; ++i) {
    pinMode(LiftRequestPin[i], INPUT);
    request_array[i] = false;

    if (i != TOTAL_FLOORS - 1) {
      pinMode(FloorRequestUpPin[i], INPUT);
      buffer_request_up[i] = false;
      pinMode(FloorRequestDownPin[i], INPUT);
      buffer_request_down[i] = false;
    }
  }

  request_count = 0;
  buffer_request_count_up = 0;
  buffer_request_count_down = 0;

  current_floor_ = 0;
  prev_floor_ = 0;

  time_last_floor_ = 0;

  dir_state = STOP;
  door_state = GATE_CLOSE;

  lcd.clear();
  SD.remove("output.txt");
  output = SD.open("output.txt", FILE_WRITE);
  output.close();

}


void loop() {
  if (dir_state == STOP) {
    delay(1000);
    time_last_floor_ = millis(); // время с начала выполнения программы
  }
  // смотрим на кнопки на этажах, заносим нажатия в массив
  UpdateFloorRequestArrays(buffer_request_up, buffer_request_down);
  // переносим нужные нажатия с этажей в основной массив остановок на этажах
  UpdateRequestArrray(request_array, dir_state, buffer_request_up, buffer_request_down);

  int target_floor = -1; // на какой этаж едем
  int offset = -1; // сколько этажей нам ехать
  // определить этаж, куда едем
  GetNextTargetInDirection(request_array, current_floor_, dir_state, target_floor, offset);
  // реализуем "счетчик" этажей (смена чисел)
  if (millis() - time_last_floor_ > delay_floor_to_floor) {
    if (dir_state == UP) {
      current_floor_ = current_floor_ + 1;
    } else if (dir_state == DOWN) {
      current_floor_ = current_floor_ - 1;
    }
    delay(50);

    prev_floor_ = current_floor_;
    time_last_floor_ = millis();
  }

  if (target_floor != -1) {
    if (current_floor_ == target_floor) { // если мы уже на нужном этаже
      request_array[target_floor] = false;

      if (buffer_request_up[target_floor]) {
        buffer_request_up[target_floor] = false;
        buffer_request_count_up = buffer_request_count_up - 1;
      }

      if (buffer_request_down[target_floor]) {
        buffer_request_down[target_floor] = false;
        buffer_request_count_down = buffer_request_count_down - 1;
      }

      request_count = request_count - 1;
      if (request_count == 0) dir_state = STOP;

      door_state = GATE_OPEN;
      LCDPrintInfo(current_floor_, dir_state, door_state, target_floor);

      for (int i = 0; i < 10; ++i) {
        UpdateFloorRequestArrays(buffer_request_up, buffer_request_down);
        UpdateRequestArrray(request_array, dir_state, buffer_request_up, buffer_request_down);
        delay(delay_wait_on_floor / 10);
      }

      if (DEBUG) {
        output = SD.open("output.txt", FILE_WRITE);
        Serial.print("Reached Floor ");
        Serial.print(target_floor);
        Serial.println(" ");
        if (output){
            output.print("Reached Floor ");
            output.print(target_floor);
            output.println(" ");
        }
        output.close();   
      }

      door_state = GATE_CLOSE;
      delay(100);
      time_last_floor_ = millis();
    } else { // если лифт в движении
      delay(500);
    }
  }

  LCDPrintInfo(current_floor_, dir_state, door_state, target_floor);
  delay(100);
}

void LCDPrintInfo(const int current_floor, const int dir_state, const int door_state, const int next_floor) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ON   STATE   TO");
  lcd.setCursor(0, 1);
  lcd.print(current_floor);

  if (dir_state == UP && door_state == GATE_CLOSE) {
    lcd.print("  GOING UP   ");
  } else if (dir_state == DOWN && door_state == GATE_CLOSE) {
    lcd.print("  GOING DOWN  ");
  } else if (door_state == GATE_OPEN) {
    lcd.print("  DOOR OPEN  ");
  } else {
    lcd.print("             ");
  }

  if (next_floor != -1) {
    lcd.print(next_floor);
  }
}

void UpdateFloorRequestArrays(bool* buffer_request_up, bool* buffer_request_down) {
  for (int i = 0; i < TOTAL_FLOORS - 1; ++i) {
    if (digitalRead(FloorRequestUpPin[i]) == 1) {
      if (!buffer_request_up[i]) {
        if (DEBUG) {
          output = SD.open("output.txt", FILE_WRITE);
          Serial.print("New request to go UP from floors ");
          Serial.println(i);
          if (output){
            output.print("New request to go UP from floors ");
            output.println(i);
          }
          output.close();
        }

        buffer_request_up[i] = true;
        buffer_request_count_up += 1;
      }
    }
    if (digitalRead(FloorRequestDownPin[i]) == 1) {
      if (!buffer_request_down[i + 1]) {
        if (DEBUG) {
          Serial.print("New request to go DOWN from floors ");
          Serial.println(i + 1);
          output = SD.open("output.txt", FILE_WRITE);
          if (output){
            output.print("New request to go DOWN from floors ");
            output.println(i + 1);
          }
          output.close();
        }

        buffer_request_down[i + 1] = true;
        buffer_request_count_down += 1;
      }
    }
  }
}

void UpdateRequestArrray(bool* request_array, int dir_state, bool* buffer_request_up, bool* buffer_request_down) {
  for (int i = 0; i < TOTAL_FLOORS; ++i) {
    if (digitalRead(LiftRequestPin[i]) == 1 && request_array[i] == false) {
      request_array[i] = true;
      request_count += 1;

      if (DEBUG) {
        output = SD.open("output.txt", FILE_WRITE);
        Serial.print("New request from lift to floor ");
        Serial.println(i);
        if (output){
          output.print("New request from lift to floor ");
          output.println(i);
        }
        output.close();
        
      }
    }
  }

  if (dir_state == STOP) {
    for (int i = 0; i < TOTAL_FLOORS; ++i) {
      if (buffer_request_up[i] == true) {
        buffer_request_count_up -= 1;
        buffer_request_up[i] == false;
        if (request_array[i] == false) {
          request_array[i] = true;
          request_count += 1;
        }
      }
      if (buffer_request_down[i] == true) {
        buffer_request_count_down -= 1;
        buffer_request_down[i] == false;
        if (request_array[i] == false) {
          request_array[i] = true;
          request_count += 1;
        }
      }
    }
  } else if (dir_state == UP) {
    for (int i = 0; i < TOTAL_FLOORS; ++i) {
      if (buffer_request_up[i] == true) {
        buffer_request_count_up -= 1;
        buffer_request_up[i] == false;
        if (request_array[i] == false) {
          request_array[i] = true;
          request_count += 1;
        }
      }
    }
  } else { // вниз
    for (int i = 0; i < TOTAL_FLOORS; ++i) {
      if (buffer_request_down[i] == true) {
        buffer_request_count_down -= 1;
        buffer_request_down[i] == false;
        if (request_array[i] == false) {
          request_array[i] = true;
          request_count += 1;
        }
      }
    }
  }
}

// находит близжайший этаж для остановки
int GetFirstElementInRequestArrayInDirection(bool *request_array, const int &dir_state, const int &current_floor) {
  if (dir_state == UP) {
    for (int i = current_floor; i < TOTAL_FLOORS; ++i) {
      if (request_array[i])
        return i;
    }
  }
  else if (dir_state == DOWN) {
    for (int i = current_floor; i >= 0; --i) {
      if (request_array[i])
        return i;
    }
  }

  return -1;
}

int abs_(const int x) {
  return (x > 0 ? x : -x);
}

void GetNextTargetInDirection(bool *request_array, int &current_floor, int &dir_state, int &target_floor, int &offset) {
  if (dir_state == STOP) {
    int closest_floor_up = GetFirstElementInRequestArrayInDirection(request_array, UP, current_floor);
    int closest_floor_down = GetFirstElementInRequestArrayInDirection(request_array, DOWN, current_floor);

    if (closest_floor_up != -1 && closest_floor_down != -1) {
      if ((closest_floor_up - current_floor) < (current_floor - closest_floor_down)) {
        target_floor = closest_floor_up;
        dir_state = UP;
        offset = closest_floor_up - current_floor;
        return;
      }
      else {
        target_floor = closest_floor_down;
        dir_state = DOWN;
        offset = current_floor - closest_floor_down;
        return;
      }
    }
    else if (closest_floor_up != -1) {
      target_floor = closest_floor_up;
      dir_state = UP;
      offset = closest_floor_up - current_floor;
      return;
    }
    else if (closest_floor_down != -1) {
      target_floor = closest_floor_down;
      dir_state = DOWN;
      offset = current_floor - closest_floor_down;
      return;
    }
    else {
      target_floor = -1;
      dir_state = STOP;
      offset = -1;
      return;
    }
  }
  else if (dir_state == UP) {
    int closest_floor_up = GetFirstElementInRequestArrayInDirection(request_array, UP, current_floor);

    if (closest_floor_up != -1) {
      target_floor = closest_floor_up;
      dir_state = UP;
      offset = closest_floor_up - current_floor;
      return;
    }
    else {
      target_floor = -1;
      dir_state = STOP;
      offset = -1;
      return;
    }
  }
  else if (dir_state == DOWN) {
    int closest_floor_down = GetFirstElementInRequestArrayInDirection(request_array, DOWN, current_floor);

    if (closest_floor_down != -1) {
      target_floor = closest_floor_down;
      dir_state = DOWN;
      offset = current_floor - closest_floor_down;
      return;
    }
    else {
      target_floor = -1;
      dir_state = STOP;
      offset = -1;
      return;
    }
  }

  return;
}
